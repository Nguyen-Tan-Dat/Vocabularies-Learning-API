# Define the Query type, which is the entry point for all GraphQL queries.
type Query {
  vocabularies(topic: String): [Vocabulary] # Fetch vocabularies by topic
  topics: [Topic]                           # Fetch all topics
}

# Define the Vocabulary type. Each vocabulary has properties like word, phonetic, meaning, and related topics.
type Vocabulary {
  id: ID!               # Unique identifier for the vocabulary
  word: String!         # The word in English
  phonetic: String      # Phonetic transcription of the word
  meaning: String       # The meaning of the word (could be in Vietnamese or other languages)
  topics: [Topic]       # Associated topics with this vocabulary
}

# Define the Topic type. Each topic has an ID and a name. It also has a list of vocabularies.
type Topic {
  id: ID!               # Unique identifier for the topic
  name: String!         # Name of the topic (e.g., "Animals", "Technology")
  vocabularies: [Vocabulary] # List of vocabularies associated with the topic
}

# Mutation type for creating, updating, or deleting vocabularies and topics
type Mutation {
  createVocabulary(word: String!, phonetic: String, meaning: String!, topicIds: [ID!]): Vocabulary
  createTopic(name: String!, userId: String!): Topic
  updateVocabulary(id: ID!, word: String, phonetic: String, meaning: String, topicIds: [ID!]): Vocabulary
  updateTopic(id: ID!, name: String): Topic
  deleteVocabulary(id: ID!): Boolean
  deleteTopic(id: ID!): Boolean
}

# Subscription type for real-time updates (optional)
type Subscription {
  vocabularyCreated: Vocabulary
  vocabularyUpdated: Vocabulary
  vocabularyDeleted: ID
}
