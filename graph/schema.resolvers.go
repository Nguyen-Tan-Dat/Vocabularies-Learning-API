package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"

	"github.com/Nguyen-Tan-Dat/Vocabualries-Learning-API/graph/model"
)

// Mutation resolver: tạo một từ vựng mới
func (r *mutationResolver) CreateVocabulary(ctx context.Context, word string, phonetic *string, meaning string, topicIds []string) (*model.Vocabulary, error) {
	vocabulary, err := r.client.Vocabulary.
		Create().
		SetWord(input.Word).
		SetPhonetic(input.Phonetic).
		SetMeaning(input.Meaning).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create vocabulary: %v", err)
	}
	return vocabulary, nil
}

// CreateTopic is the resolver for the createTopic field.
func (r *mutationResolver) CreateTopic(ctx context.Context, name string, userID string) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: CreateTopic - createTopic"))
}

// Mutation resolver: cập nhật từ vựng
func (r *mutationResolver) UpdateVocabulary(ctx context.Context, id string, word *string, phonetic *string, meaning *string, topicIds []string) (*model.Vocabulary, error) {
	vocabulary, err := r.client.Vocabulary.
		UpdateOneID(id).
		SetWord(input.Word).
		SetPhonetic(input.Phonetic).
		SetMeaning(input.Meaning).
		Save(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to update vocabulary: %v", err)
	}
	return vocabulary, nil
}

// UpdateTopic is the resolver for the updateTopic field.
func (r *mutationResolver) UpdateTopic(ctx context.Context, id string, name *string) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: UpdateTopic - updateTopic"))
}

// Mutation resolver: xóa từ vựng
func (r *mutationResolver) DeleteVocabulary(ctx context.Context, id string) (*bool, error) {
	err := r.client.Vocabulary.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, fmt.Errorf("failed to delete vocabulary: %v", err)
	}
	return true, nil
}

// DeleteTopic is the resolver for the deleteTopic field.
func (r *mutationResolver) DeleteTopic(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTopic - deleteTopic"))
}

// Query resolver: lấy tất cả từ vựng theo topic
func (r *queryResolver) Vocabularies(ctx context.Context, topic *string) ([]*model.Vocabulary, error) {
	vocabularies, err := r.client.Vocabulary.
		Query().
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch vocabularies: %v", err)
	}
	return vocabularies, nil
}

// Query resolver: lấy tất cả các topic
func (r *queryResolver) Topics(ctx context.Context) ([]*model.Topic, error) {
	topics, err := r.client.Topic.
		Query().
		All(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch topics: %v", err)
	}
	return topics, nil
}

// VocabularyCreated is the resolver for the vocabularyCreated field.
func (r *subscriptionResolver) VocabularyCreated(ctx context.Context) (<-chan *model.Vocabulary, error) {
	panic(fmt.Errorf("not implemented: VocabularyCreated - vocabularyCreated"))
}

// VocabularyUpdated is the resolver for the vocabularyUpdated field.
func (r *subscriptionResolver) VocabularyUpdated(ctx context.Context) (<-chan *model.Vocabulary, error) {
	panic(fmt.Errorf("not implemented: VocabularyUpdated - vocabularyUpdated"))
}

// VocabularyDeleted is the resolver for the vocabularyDeleted field.
func (r *subscriptionResolver) VocabularyDeleted(ctx context.Context) (<-chan *string, error) {
	panic(fmt.Errorf("not implemented: VocabularyDeleted - vocabularyDeleted"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
