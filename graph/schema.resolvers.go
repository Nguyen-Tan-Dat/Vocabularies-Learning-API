package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"errors"
	"fmt"
	"gorm.io/gorm"
	"log"

	"github.com/Nguyen-Tan-Dat/Vocabularies-Learning-API/graph/model"
)

func (r *mutationResolver) CreateTopic(ctx context.Context, input model.NewTopic) (*model.Topic, error) {
	// Kiểm tra xem topic đã tồn tại chưa
	var existingTopic model.Topic
	err := r.DB.Where("name = ? AND user_id = ?", input.Name, input.UserID).First(&existingTopic).Error
	if err == nil {
		log.Printf("Topic already exists for user %d with name %s", input.UserID, input.Name)
		return nil, fmt.Errorf("topic with name '%s' already exists for user %d", input.Name, input.UserID)
	} else if !errors.Is(err, gorm.ErrRecordNotFound) {
		log.Println("Failed to check topic existence:", err)
		return nil, err
	}

	topic := model.Topic{
		Name:   input.Name,
		UserID: input.UserID,
	}

	if err := r.DB.Create(&topic).Error; err != nil {
		log.Println("Failed to create topic:", err)
		return nil, err
	}

	return &topic, nil
}

// UpdateTopic is the resolver for the updateTopic field.
func (r *mutationResolver) UpdateTopic(ctx context.Context, input model.UpdateTopicInput) (*model.Topic, error) {
	// Tìm topic cần cập nhật theo ID
	var topic model.Topic
	if err := r.DB.First(&topic, input.ID).Error; err != nil {
		log.Println("Topic not found:", err)
		return nil, err
	}

	// Cập nhật các trường nếu input không phải nil
	if input.Name != nil {
		topic.Name = *input.Name
	}

	// Lưu thay đổi vào database
	if err := r.DB.Save(&topic).Error; err != nil {
		log.Println("Failed to update topic:", err)
		return nil, err
	}

	return &topic, nil
}

// DeleteTopic is the resolver for the deleteTopic field.
func (r *mutationResolver) DeleteTopic(ctx context.Context, id int32) (bool, error) {
	if err := r.DB.Delete(&model.Topic{}, id).Error; err != nil {
		log.Println("Failed to delete topic:", err)
		return false, err
	}
	return true, nil
}

// GetTopics is the resolver for the getTopics field.
func (r *queryResolver) GetTopics(ctx context.Context, userID int32) ([]*model.Topic, error) {
	var topics []*model.Topic
	if err := r.DB.Where("user_id = ?", userID).Find(&topics).Error; err != nil {
		log.Println("Failed to fetch topics:", err)
		return nil, err
	}
	return topics, nil
}

// GetTopicByID is the resolver for the getTopicById field.
func (r *queryResolver) GetTopicByID(ctx context.Context, id int32) (*model.Topic, error) {
	var topic model.Topic
	if err := r.DB.First(&topic, id).Error; err != nil {
		log.Println("Failed to fetch topic by ID:", err)
		return nil, err
	}
	return &topic, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
