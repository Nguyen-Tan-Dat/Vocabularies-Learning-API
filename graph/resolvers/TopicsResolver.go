package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"

	"github.com/Nguyen-Tan-Dat/Vocabularies-Learning-API/graph/model"
)

// CreateTopic is the resolver for the createTopic field.
func (r *mutationResolver) CreateTopic(ctx context.Context, input model.NewTopic) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: CreateTopic - createTopic"))
}

// UpdateTopic is the resolver for the updateTopic field.
func (r *mutationResolver) UpdateTopic(ctx context.Context, input model.UpdateTopicInput) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: UpdateTopic - updateTopic"))
}

// DeleteTopic is the resolver for the deleteTopic field.
func (r *mutationResolver) DeleteTopic(ctx context.Context, id int32) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTopic - deleteTopic"))
}

// GetTopics is the resolver for the getTopics field.
func (r *queryResolver) GetTopics(ctx context.Context) ([]*model.Topic, error) {
	userID, err := getUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}
	return r.TopicService.GetTopics(ctx, userID)
}

// GetTopicByID is the resolver for the getTopicById field.
func (r *queryResolver) GetTopicByID(ctx context.Context, id int32) (*model.Topic, error) {
	panic(fmt.Errorf("not implemented: GetTopicByID - getTopicById"))
}
